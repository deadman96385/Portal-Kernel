/*
 * UCSI driver for Cypress CCGx Type-C controller
 *
 * Copyright (C) 2017-2018 NVIDIA Corporation. All rights reserved.
 * Author: Ajay Gupta <ajayg@nvidia.com>
 *
 * Some code borrowed from drivers/usb/typec/ucsi/ucsi_acpi.c
 */
#ifndef __LINUX_CYPD_COMMON_H__
#define __LINUX_CYPD_COMMON_H__

#include <linux/types.h>

#define BYTE_OFF_0(x) (u8)((x) & 0xFF)
#define BYTE_OFF_8(x) (u8)((x >> 8) & 0xFF)
#define BYTE_OFF_16(x) (u8)((x >> 16) & 0xFF)
#define BYTE_OFF_24(x) (u8)((x >> 24) & 0xFF)
#define FLAGBIT(x) (0x00000001 << (x))
#define FLAGBITS(x, y) ((0xFFFFFFFF >> (32 - (y) - 1)) << (x))

#define FLAG_ICSERIALS_LEN 8
#define FLAG_HID_BIT 10
#define FLAG_IDC_BIT 11

#define CYPD_CHIP_IDC ((CYPD_CHIP_TYPE & FLAGBIT(FLAG_IDC_BIT)) \
	== FLAGBIT(FLAG_IDC_BIT))
#define CYPD_HID_SUPPORTTED ((CYPD_CHIP_TYPE & FLAGBIT(FLAG_HID_BIT)) \
	== FLAGBIT(FLAG_HID_BIT))

#define CYPD_CHIP_TYPE_MAPPING { {0x01, 0x58, 0x22, 0x58,\
	0x22, 0x00, 0x00, 0x58, 0x2C} }

#define I2C_BUFFER_LENGTH_MAXINUM 256
#define FILE_NAME_LENGTH 128
#define ENABLE 1
#define DISABLE 0
#define VALID 1
#define INVALID 0
#define CYPD_CMD_START1 0x55
#define CYPD_CMD_START2 0xAA
#define CYPD_CMD_START_DELAY 10
#define CYPD_CMD_READ_ID 0x90
#define CYPD_CMD_READ_ID_LEN 4
#define CYPD_CMD_READ_ID_LEN_INCELL 1

typedef enum CyCtrlRegsAddr_t {
	CCG_REG_DEVICE_MODE = 0x0000, // 0
	CCG_REG_BOOTMODE_RSN, // 1
	CCG_REG_SIID_LSB, // 2
	CCG_REG_SIID_MSB, // 3
	CCG_REG_BL_LASTROW_LSB, // 4
	CCG_REG_BL_LASTROW_MSB, // 5
	CCG_REG_INTR_STAT, // 6
	CCG_REG_JUMP_TO_BOOT, // 7
	CCG_REG_RESET_RQT, // 8
	CCG_REG_RESET_TYPE, // 9
	CCG_REG_FLASHMODE_ENTER, // A
	CCG_REG_VALIDATE_FW, // B
	CCG_REG_FLASH_SIG, // C
	CCG_REG_FLASH_CMD, // D
	CCG_REG_FLASH_ROW_LSB, // E
	CCG_REG_FLASH_ROW_MSB, // F
	CCG_REG_BLVER_B0, // 10
	CCG_REG_BLVER_B1, // 11
	CCG_REG_BLVER_B2, // 12
	CCG_REG_BLVER_B3, // 13
	CCG_REG_BLVER_B4, // 14
	CCG_REG_BLVER_B5, // 15
	CCG_REG_BLVER_B6, // 16
	CCG_REG_BLVER_B7, // 17
	CCG_REG_FW1VER_B0, // 18
	CCG_REG_FW1VER_B1, // 19
	CCG_REG_FW1VER_B2, // 1A
	CCG_REG_FW1VER_B3, // 1B
	CCG_REG_FW1VER_B4, // 1C
	CCG_REG_FW1VER_B5, // 1D
	CCG_REG_FW1VER_B6, // 1E
	CCG_REG_FW1VER_B7, // 1F
	CCG_REG_FW2VER_B0, // 20
	CCG_REG_FW2VER_B1, // 21
	CCG_REG_FW2VER_B2, // 22
	CCG_REG_FW2VER_B3, // 23
	CCG_REG_FW2VER_B4, // 24
	CCG_REG_FW2VER_B5, // 25
	CCG_REG_FW2VER_B6, // 26
	CCG_REG_FW2VER_B7, // 27
	CCG_REG_FW1_LOC_LSB, // 28
	CCG_REG_FW1_LOC_MSB, // 29
	CCG_REG_FW2_LOC_LSB, // 2A
	CCG_REG_FW2_LOC_MSB, // 2B
	CCG_REG_PDPORT_EN, // 2C
	CCG_REG_RESP_TYPE = 0x007E, // 7E
	CCG_REG_RESP_LEN // 7F
} CyCtrlRegsAddr_t;

typedef enum _CY_RET_STAT {
	CY_SUCCESS_RESP = 0,/*API returned successfully without any errors.*/
	CY_ERROR_I2C_WRITE_DATA_FAILED,
	CY_ERROR_I2C_WRITE_ADDR_FAILED,
	CY_ERROR_I2C_READ_DATA_FAILED,
	CY_ERROR_I2C_READ_RESPONSE_FAILED,
	CY_ERROR_INVALID_FW_MODE,
	CY_ERROR_INVALID_RESP_REG_LEN,
	CY_ERROR_INVALID_RESPONSE,
	CY_ERROR_MESSAGE_QUEUE_OVERFLOW,
	CY_ERROR_INTR_REG_CLEAR_FAILED,
	CY_ERROR_ENTER_FLASH_MODE_FAILED,
	CY_ERROR_JUMP_TO_BOOT_FAILED,
	CY_ERROR_JUMP_TO_ALT_FW_FAILED,
	CY_ERROR_FW_METADATA_INVALID,
	CY_ERROR_FLASH_ROW_WRITE_FAILED,
	CY_ERROR_FLASH_ROW_READ_RESP_FAILED,
	CY_ERROR_FLASH_ROW_READ_LENGTH_FAILED,
	CY_ERROR_INVALID_FW,
	CY_ERROR_PD_PORT_DISABLE_FAILED,
	CY_ERROR_DEVICE_RESET_FAILED,
	CY_ERROR_BIN_ROW_READ_FAILED,
	CY_ERROR_INVALID_IMAGE_NO,
	CY_ERROR_FLASH_ROW_READ_WRITE_MISMATCH,
	CY_ERROR_INVALID_FW_UPDATE_OPTION,
	CY_ERROR_BIN_FILE_READ_FAILED,
	CY_ERROR_SILICON_ID_MISMATCH
} CY_RET_STAT;

#define CCG4_HPI_SUCCESS_RESPONSE (0x02)
#define CCG4_HPI_RESET_COMPLETE (0x80)
#define CCG4_FLASH_READ_RESPONSE (0x03)
#define CCG4_FLASH_ENTER_SIG ('P')
#define NO_OF_BTLR_FLASH_ROW (20)
#define END_OF_APP_FLASH_ROW (512)
#define APP_LAYER_FLASH_BEGIN (0x1400)
#define CCG_FLASH_RW_MEM (0x0200)
#define CCG_FLASH_WRITE_CMD (1)
#define CCG_FLASH_READ_CMD (0)
#define CCG_FLASH_RW_SIG ('F')
#define CCG4_JUMP_TO_BOOT_SIG ('J')
#define CCG4_JUMP_TO_ALT_SIG ('A')

#define FW1_METADATA_FLASH_ROW 0x3FF
#define FW2_METADATA_FLASH_ROW 0x3FE
#define METADATA_INFO_BYTES 0xC0
#define LAST_BOOTLOADER_ROW 0x05
#define FW_SIZE_BYTE 0x09
#define METADATA_ROW_SIZE 0x100
#define METADATA_VALID_CHECK_BYTE 0x16
#define METADATA_VALID_CHECK_1 0x59
#define METADATA_VALID_CHECK_2 0x43

#define VECTOR_DATA_ROW_SIZE 0x100
#define BASE_VERSION 0xE0
#define APP_VERSION 0xE4
#define APP_STRING_BYTES 0x00
#define APP_CIRCUIT_BYTE 0x02
#define APP_MAJOR_MINOR_BYTE 0x03
#define SILICON_ID_BYTES 0xE8
#define SILICON_FAMILY_BYTE 0x02

#define CCG4_RESET_SIG ('R')
#define CCG4_RESET_DEV_CMD (1)

#define CYPD_SYSFS_ECHO_ON(buf) (buf[0] == '1')
#define CYPD_SYSFS_ECHO_OFF(buf) (buf[0] == '0')

#define CYPD_DEBUG_EN 1

#if CYPD_DEBUG_EN
#define CYPD_DEBUG(fmt, args...) \
	pr_err("[CYPD][%s]"fmt"\n", __func__, ##args)
#define CYPD_FUNC_ENTER() \
	pr_err("[CYPD]%s: Enter\n", __func__)
#define CYPD_FUNC_EXIT() \
	pr_err("[CYPD]%s: Exit(%d)\n",\
	__func__, __LINE__)
#else /* #if CYPD_DEBUG_EN */
#define CYPD_DEBUG(fmt, args...)
#define CYPD_FUNC_ENTER()
#define CYPD_FUNC_EXIT()
#endif

#define CYPD_INFO(fmt, args...) \
	pr_err("[CYPD][Info]"fmt"\n", ##args)
#define CYPD_ERROR(fmt, args...) \
	pr_err("[CYPD][Error]"fmt"\n", ##args)

#endif /* __LINUX_FOCALTECH_COMMON_H__ */
